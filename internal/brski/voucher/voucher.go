package voucher

import (
	"encoding/json"
	"time"
)

// SerialNumber represents a device serial number
type SerialNumber string

// VoucherRequest represents a voucher request as defined in RFC 8995
type VoucherRequest struct {
	// AssertionInfo indicates how the pledge generated the voucher request
	AssertionInfo AssertionType `json:"assertion,omitempty"`

	// CreatedOn is the date and time that the voucher request was created
	CreatedOn time.Time `json:"created-on,omitempty"`

	// Nonce is a value generated by the pledge to prevent replay attacks
	Nonce string `json:"nonce,omitempty"`

	// ProximityRegistrarCert is the PKIX certificate of the proximate registrar
	ProximityRegistrarCert []byte `json:"proximity-registrar-cert,omitempty"`

	// SerialNumber is the serial number of the device
	SerialNumber SerialNumber `json:"serial-number"`

	// PriorSignedVoucherRequest is the base64 encoding of the original signed
	// voucher request (if present)
	PriorSignedVoucherRequest string `json:"prior-signed-voucher-request,omitempty"`
}

// AssertionType defines how the pledge generated the voucher request
type AssertionType string

// Assertion types as defined in RFC 8366
const (
	AssertionProximity AssertionType = "proximity"
	AssertionVerified  AssertionType = "verified"
)

// Voucher represents a voucher as defined in RFC 8366
type Voucher struct {
	// AssertionInfo indicates the type of assertion that the MASA is making
	AssertionInfo AssertionType `json:"assertion,omitempty"`

	// CreatedOn is the date and time that the voucher was created
	CreatedOn time.Time `json:"created-on,omitempty"`

	// ExpiresOn is the date and time that the voucher expires
	ExpiresOn time.Time `json:"expires-on,omitempty"`

	// Nonce matches the nonce provided in the voucher request
	Nonce string `json:"nonce,omitempty"`

	// PinnedDomainCert is the PKIX certificate of the domain CA
	PinnedDomainCert []byte `json:"pinned-domain-cert"`

	// SerialNumber is the serial number of the device
	SerialNumber SerialNumber `json:"serial-number"`

	// DomainCertRevocationChecks indicates if the domain has been verified to
	// enforce revocation checking
	DomainCertRevocationChecks bool `json:"domain-cert-revocation-checks,omitempty"`

	// LastRenewalDate is the date and time of the last renewal (if renewed)
	LastRenewalDate time.Time `json:"last-renewal-date,omitempty"`
}

// VoucherStatus represents the status of a voucher
type VoucherStatus struct {
	// Status indicates the current status of the voucher
	Status string `json:"status"`

	// Reason provides additional information about the status
	Reason string `json:"reason,omitempty"`

	// AdditionalInfo provides any additional information about the status
	AdditionalInfo map[string]interface{} `json:"additional-info,omitempty"`
}

// AuditLogEntry represents an entry in the audit log
type AuditLogEntry struct {
	// EventType indicates the type of event
	EventType string `json:"event-type"`

	// Timestamp is the time the event occurred
	Timestamp time.Time `json:"timestamp"`

	// SerialNumber is the serial number of the device
	SerialNumber SerialNumber `json:"serial-number"`

	// Details provides additional details about the event
	Details map[string]interface{} `json:"details,omitempty"`
}

// EncodeVoucherRequest encodes a voucher request to JSON
func EncodeVoucherRequest(vr *VoucherRequest) ([]byte, error) {
	return json.Marshal(vr)
}

// DecodeVoucherRequest decodes a voucher request from JSON
func DecodeVoucherRequest(data []byte) (*VoucherRequest, error) {
	var vr VoucherRequest
	err := json.Unmarshal(data, &vr)
	if err != nil {
		return nil, err
	}
	return &vr, nil
}

// EncodeVoucher encodes a voucher to JSON
func EncodeVoucher(v *Voucher) ([]byte, error) {
	return json.Marshal(v)
}

// DecodeVoucher decodes a voucher from JSON
func DecodeVoucher(data []byte) (*Voucher, error) {
	var v Voucher
	err := json.Unmarshal(data, &v)
	if err != nil {
		return nil, err
	}
	return &v, nil
}

// EncodeVoucherStatus encodes a voucher status to JSON
func EncodeVoucherStatus(vs *VoucherStatus) ([]byte, error) {
	return json.Marshal(vs)
}

// DecodeVoucherStatus decodes a voucher status from JSON
func DecodeVoucherStatus(data []byte) (*VoucherStatus, error) {
	var vs VoucherStatus
	err := json.Unmarshal(data, &vs)
	if err != nil {
		return nil, err
	}
	return &vs, nil
}

// EncodeAuditLogEntry encodes an audit log entry to JSON
func EncodeAuditLogEntry(ale *AuditLogEntry) ([]byte, error) {
	return json.Marshal(ale)
}

// DecodeAuditLogEntry decodes an audit log entry from JSON
func DecodeAuditLogEntry(data []byte) (*AuditLogEntry, error) {
	var ale AuditLogEntry
	err := json.Unmarshal(data, &ale)
	if err != nil {
		return nil, err
	}
	return &ale, nil
}
